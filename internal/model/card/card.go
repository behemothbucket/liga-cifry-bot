package card

import (
	"fmt"
	"strings"
)

const personCardTemplate = `
üßë‚Äçüíº<b>–§–ò–û</b>
%s

üìç<b>–ì–æ—Ä–æ–¥</b>
%s

üèõ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</b>
%s

ü§ù <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å</b>
%s

üìù <b>–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏</b>
%s

ü§ù <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</b>
%s

üì±<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏</b>
%s`

const organizationCardTemplate = `
üèõ <b>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</b>
%s

üè¢ <b>–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ</b>

üìç<b>–ì–æ—Ä–æ–¥</b>
%s

ü§ù <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞</b>
%s

üåê <b>–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å–æ—Ä—Ü–∏—É–º–µ</b>
%s

üöÄ <b>¬´–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç-2030¬ª</b>
%s

‚öõÔ∏è <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–û</b>
%s

üî¨ <b>–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ù–û–¶</b>
%s`

type Card interface {
	ToDomain() string
}

type PersonCard struct {
	ID                  string
	Fio                 string
	City                string
	Organization        string
	JobTitle            string
	ExpertCompetencies  string
	PossibleCooperation string
	Contacts            string
}

type OrganizationCard struct {
	ID                   string
	City                 string
	Organization         string
	ConsortiumMembership string
	PossibleCooperation  string
	Priority2030         string
	Contacts             string
	Software             string
	LaboratoriesAndNOCs  string
}

func (pc PersonCard) ToDomain(field string) string {
	return fmt.Sprintf(
		personCardTemplate,
		pc.Fio,
		pc.City,
		pc.Organization,
		pc.JobTitle,
		pc.ExpertCompetencies,
		pc.PossibleCooperation,
		pc.Contacts)
}

func (oc OrganizationCard) ToDomain() string {
	return fmt.Sprintf(
		organizationCardTemplate,
		oc.Organization,
		oc.City,
		oc.PossibleCooperation,
		oc.ConsortiumMembership,
		oc.Priority2030,
		oc.Software,
		oc.LaboratoriesAndNOCs)
}

// TODO –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
func ToDomain(card Card) string {
	var domainCard string

	switch c := card.(type) {
	case PersonCard:
		domainCard = c.ToDomain()
	case OrganizationCard:
		domainCard = c.ToDomain()
	}

	return domainCard
}

func FormatPersonCards(cards []PersonCard) []string {
	var domainCards []string

	for _, card := range cards {
		domainCard := ToDomain(card)
		domainCards = append(domainCards, domainCard)
	}

	return domainCards
}

func FormatOrganizationCards(cards []OrganizationCard) []string {
	var domainCards []string

	for _, card := range cards {
		domainCard := ToDomain(card)
		domainCards = append(domainCards, domainCard)
	}

	return domainCards
}

func FormatCardsAndHighlightOrganization(
	cards []OrganizationCard,
	highlight bool,
	searchData []string,
) []string {
	var domainCards []string

	for _, card := range cards {
		domainCard := ToDomain(card)
		if highlight {
			for _, phrase := range searchData {
				if strings.Contains(strings.ToLower(domainCard), strings.ToLower(phrase)) {
					domainCard = strings.Replace(domainCard, phrase, "<code>"+phrase+"</code>", -1)
				}
			}
		}
		domainCards = append(domainCards, domainCard)
	}

	return domainCards
}

func FormatCardsAndHighlightPerson(
	cards []PersonCard,
	highlight bool,
	searchData []string,
) []string {
	var domainCards []string

	for _, card := range cards {
		domainCard := ToDomain(card)
		if highlight {
			for _, phrase := range searchData {
				if strings.Contains(strings.ToLower(domainCard), strings.ToLower(phrase)) {
					domainCard = strings.Replace(domainCard, phrase, "<code>"+phrase+"</code>", -1)
				}
			}
		}
		domainCards = append(domainCards, domainCard)
	}
	return domainCards
}
