package card

import (
	"fmt"
)

type Card struct {
	Person       *PersonCard
	Organization *OrganizationCard
}

type PersonCard struct {
	ID                  string
	Fio                 string
	City                string
	Organization        string
	JobTitle            string
	ExpertCompetencies  string
	PossibleCooperation string
	Contacts            string
}

type OrganizationCard struct {
	ID                  string
	Fio                 string
	City                string
	Organization        string
	JobTitle            string
	ExpertCompetencies  string
	PossibleCooperation string
	Contacts            string
}

const personCardTemplate = `
üßë‚Äçüíº*–§–ò–û*
%s

üìç*–ì–æ—Ä–æ–¥*
%s

üèõ *–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è*
%s

ü§ù *–î–æ–ª–∂–Ω–æ—Å—Ç—å*
%s

üìù *–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏*
%s

ü§ù *–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞*
%s

üì±*–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏*
%s`

// TODO –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
func ToDomain(card *PersonCard) string {
	domainCard := fmt.Sprintf(personCardTemplate,
		card.Fio,
		card.City,
		card.Organization,
		card.JobTitle,
		card.ExpertCompetencies,
		card.PossibleCooperation,
		card.Contacts,
	)

	return domainCard
}

func FormatCards(cards []PersonCard) []string {
	var domainCards []string

	for _, card := range cards {
		domainCard := ToDomain(&card)
		domainCards = append(domainCards, domainCard)
	}

	return domainCards
}
