package dialog

import (
	"context"
	"fmt"
	"os"
	"telegram-bot/internal/logger"
	"telegram-bot/internal/model/card"
	"telegram-bot/internal/model/db"
	"telegram-bot/internal/model/search"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –Ω–∞—á–∞–ª–æ.

var (
	txtMainMenu       = "–ü—Ä–∏–≤–µ—Ç, %v.\n–ú–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
	txtUnknownCommand = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ\n/start"
	txtCardNotFound   = "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ... ü§∑‚Äç‚ôÇÔ∏è"
	// txtReportWait      = "–ò—â—É üîé\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	txtCriterionChoose = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–∏–º–µ–Ω–∏—Ç—å* ‚úÖ."
	txtNoCriteria      = "‚ùóÔ∏è–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π."
	txtCriteriaInput   = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *%v*."
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –∫–æ–Ω–µ—Ü.

// –û–±–ª–∞—Å—Ç—å "–í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": –Ω–∞—á–∞–ª–æ.

// MessageSender –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
type MessageSender interface {
	SendMessage(msg Message) error
	// SendMessageWithMarkup(
	// 	chatID int64,
	// 	text string,
	// 	markup *tgbotapi.InlineKeyboardMarkup,
	// ) DeferredMessage
	// SendCards(chatID int64, cards []string) DeferredMessage
	// SendFile(chatID int64, file *tgbotapi.FileReader, currentTime string) DeferredMessage
	// SendMedia(chatID int64, file *tgbotapi.FileReader, caption string) DeferredMessage
	// SendMediaGroup(chatID int64, paths []string, caption string) DeferredMessage
	EditTextAndMarkup(
		msg Message,
		newText string,
		newMarkup *tgbotapi.InlineKeyboardMarkup,
	) error
	EditMarkup(msg Message, markup *tgbotapi.InlineKeyboardMarkup) error
	DeferUpdate(update tgbotapi.Update)
	StartDBJob(ctx context.Context)
	SendDBDump() error
}

// Model –ú–æ–¥–µ–ª—å –±–æ—Ç–∞ (–∫–ª–∏–µ–Ω—Ç, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–∏—Å–∫)
type Model struct {
	ctx      context.Context
	tgClient MessageSender      // –ö–ª–∏–µ–Ω—Ç.
	storage  db.UserDataStorage // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
	search   search.Engine      // –ü–æ–∏—Å–∫.
}

// New –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¢–ì –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.
func New(
	ctx context.Context,
	tgClient MessageSender,
	storage db.UserDataStorage,
	searchEngine search.Engine,
) *Model {
	return &Model{
		ctx:      ctx,
		tgClient: tgClient,
		storage:  storage,
		search:   searchEngine,
	}
}

// Message –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
type Message struct {
	Text           string
	ChatID         int64
	IsCommand      bool
	BotName        string
	FirstName      string
	MsgID          int
	CallbackQuery  *tgbotapi.CallbackQuery
	NewChatMembers []tgbotapi.User
	LeftChatMember *tgbotapi.User
}

func (m *Model) GetCtx() context.Context {
	return m.ctx
}

func (m *Model) SetCtx(ctx context.Context) {
	m.ctx = ctx
}

// HandleMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (m *Model) HandleMessage(msg Message) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	switch {
	case msg.IsCommand:
		return HandleBotCommands(ctx, m, msg)
	case len(msg.NewChatMembers) != 0:
		return m.storage.JoinGroup(ctx, &msg.NewChatMembers[0])
	case msg.LeftChatMembers != nil:
		return m.storage.LeaveGroup(ctx, msg.LeftChatMembers)
	case m.search.IsEnabled():
		m.search.AddSearchData(msg.Text)
		cards, err := m.search.ProcessCards(ctx, m.storage)
		if cards == nil {
			logger.Info(
				"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É",
			)
			return m.tgClient.SendMessageWithMarkup(
				msg.ChatID,
				txtCardNotFound,
				&MarkupCardMenu,
			)
		}
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –∫–∞—Ä—Ç—ã", "ERROR", err)
		}
		m.search.Disable()
		return m.tgClient.SendCards(msg.ChatID, cards)
	default:
		return m.tgClient.SendMessage(msg.ChatID, txtUnknownCommand)
	}
}

// CheckBotCommands —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
func HandleBotCommands(ctx context.Context, m *Model, msg Message) error {
	// TEST
	testChatID := int64(5587823077)
	// testChatID := int64(155401792)
	switch msg.Text {
	case "/start", fmt.Sprintf("/start@" + msg.BotName):
		if m.search.IsEnabled() {
			m.search.Disable()
		}
		return m.tgClient.SendMessageWithMarkup(
			msg.ChatID,
			fmt.Sprintf(txtMainMenu, msg.FirstName),
			&MarkupMainMenu,
		)
	case "/allpersonalcards":
		rawCards, err := m.storage.ShowAllPersonalCards(ctx)
		if err != nil {
			logger.Error("–û—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä–µ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫", "ERROR", err)
		}
		cards := card.FormatCards(rawCards)
		return m.tgClient.SendCards(msg.ChatID, cards)
	case "/dump":
		return m.tgClient.SendDBDump()
	case "/cat":
		file, _ := os.Open("./img/cat.jpg")
		reader := tgbotapi.FileReader{Name: file.Name(), Reader: file}
		return m.tgClient.SendMedia(testChatID, &reader, "–ó–¥–∞—Ä–æ–≤–∞ –µ–ø—Ç–∏—Ç—å")
	case "/cats":
		paths := []string{"./img/cat.jpg", "./img/cat.jpg", "./img/cat.jpg"}
		return m.tgClient.SendMediaGroup(testChatID, paths, "–ë—ç–π–±–∏")
	}

	return nil
}

func (m *Model) HandleButton(msg Message) error {
	button := msg.CallbackQuery.Data
	firstName := msg.CallbackQuery.From.FirstName
	previousMarkup := msg.CallbackQuery.Message.ReplyMarkup

	switch button {
	case BtnBack:
		m.search.Disable()
		ResetCriteriaButtons()
		return m.tgClient.EditTextAndMarkup(
			msg,
			fmt.Sprintf(txtMainMenu, firstName),
			&MarkupMainMenu,
		)
	case BtnSearchPerson:
		m.search.SetSearchScreen("personal_cards")
		return m.tgClient.EditTextAndMarkup(
			msg,
			txtCriterionChoose,
			&MarkupSearchPersonMenu,
		)
	case BtnSearchOrganization:
		m.search.SetSearchScreen("organization_cards")
		return m.tgClient.EditTextAndMarkup(
			msg,
			txtCriterionChoose,
			&MarkupSearchOrganizationMenu,
		)
	case BtnApply:
		lenCriterions := len(m.search.GetCriterions())
		if lenCriterions == 0 {
			return m.tgClient.EditTextAndMarkup(
				msg,
				txtNoCriteria,
				previousMarkup,
			)
			// TEST
		} else if lenCriterions == 1 {
			m.search.Enable()
			var alias string
			for key := range m.search.GetCriterions() {
				alias = key
			}
			return m.tgClient.EditTextAndMarkup(
				msg,
				fmt.Sprintf(txtCriteriaInput, alias),
				&MarkupCancelMenu,
			)
		}
	case BtnCancelSearch:
		m.search.Disable()
		ResetCriteriaButtons()
		return m.tgClient.SendMessageWithMarkup(
			msg.ChatID,
			fmt.Sprintf(txtMainMenu, firstName),
			&MarkupMainMenu,
		)
	case BtnMenu:
		m.search.Disable()
		ResetCriteriaButtons()
		return m.tgClient.SendMessageWithMarkup(
			msg.ChatID,
			fmt.Sprintf(txtMainMenu, firstName),
			&MarkupMainMenu,
		)
	case HandleCriterionButton(button, m.search):
		searchScreen := m.search.GetSearchScreen()
		markup := CreateSearchMenuMarkup(searchScreen)
		return m.tgClient.EditMarkup(
			msg,
			&markup,
		)
	}

	return nil
}
