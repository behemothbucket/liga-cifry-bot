package dialog

import (
	"context"
	"fmt"
	"telegram-bot/internal/model/card/person"
	"time"

	db "telegram-bot/internal/model/db"
	search "telegram-bot/internal/model/search"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/opentracing/opentracing-go"
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –Ω–∞—á–∞–ª–æ.

var (
	txtMainMenu       = "–ü—Ä–∏–≤–µ—Ç, %v.\n–ú–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏."
	txtUnknownCommand = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ\n/start"
	// txtReportError     = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
	// txtReportWait      = "–ò—â—É üîé\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	txtCriterionChoose = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ *–ü—Ä–∏–º–µ–Ω–∏—Ç—å* ‚úÖ."
	txtNoCriteria      = "‚ùóÔ∏è–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π."
	txtCriteriaInput   = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *%v*."
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –∫–æ–Ω–µ—Ü.

// –û–±–ª–∞—Å—Ç—å "–í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": –Ω–∞—á–∞–ª–æ.

// MessageSender –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
type MessageSender interface {
	SendMessage(text string, chatID int64) error
	SendMessageWithMarkup(text string, chatID int64, markup *tgbotapi.InlineKeyboardMarkup) error
	EditTextAndMarkup(
		msg Message,
		newText string,
		newMarkup *tgbotapi.InlineKeyboardMarkup,
	) error
	EditMarkup(msg Message, markup *tgbotapi.InlineKeyboardMarkup) error
	// EditText(chatID int64, msgID int, text string) error
}

// Model –ú–æ–¥–µ–ª—å –±–æ—Ç–∞ (–∫–ª–∏–µ–Ω—Ç, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–∏—Å–∫)
type Model struct {
	ctx      context.Context
	tgClient MessageSender       // –ö–ª–∏–µ–Ω—Ç.
	storage  db.UserDataStorage  // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
	search   search.SearchEngine // –ü–æ–∏—Å–∫.
}

// New –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¢–ì –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.
func New(
	ctx context.Context,
	tgClient MessageSender,
	storage db.UserDataStorage,
	searchEngine search.SearchEngine,
) *Model {
	return &Model{
		ctx:      ctx,
		tgClient: tgClient,
		storage:  storage,
		search:   searchEngine,
	}
}

// Message –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
type Message struct {
	Text            string
	Data            string
	MsgID           int
	ChatID          int64
	UserID          int64
	FirstName       string
	CallbackQuery   *tgbotapi.CallbackQuery
	NewChatMembers  []tgbotapi.User
	LeftChatMembers *tgbotapi.User
	Markup          *tgbotapi.InlineKeyboardMarkup
}

func (m *Model) GetCtx() context.Context {
	return m.ctx
}

func (m *Model) SetCtx(ctx context.Context) {
	m.ctx = ctx
}

// HandleMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (m *Model) HandleMessage(msg Message) error {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
	if isNeedReturn, err := CheckBotCommands(m, msg); err != nil || isNeedReturn {
		return err
	}

	// –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã
	if len(msg.NewChatMembers) != 0 {
		return m.storage.JoinGroup(ctx, &msg.NewChatMembers[0])
	}

	// –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω
	if msg.LeftChatMembers != nil {
		return m.storage.LeaveGroup(ctx, msg.LeftChatMembers)
	}

	// –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
	if m.search.IsEnabled() {
		return m.ProcessSearch(ctx, msg)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
	return m.tgClient.SendMessage(txtUnknownCommand, msg.ChatID)
}

// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
func CheckBotCommands(m *Model, msg Message) (bool, error) {
	span, ctx := opentracing.StartSpanFromContext(m.ctx, "checkBotCommands")
	m.ctx = ctx
	defer span.Finish()

	switch msg.Text {
	case "/start":
		m.search.Disable()
		// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
		return true, m.tgClient.SendMessageWithMarkup(
			fmt.Sprintf(txtMainMenu, msg.FirstName),
			msg.ChatID,
			&markupMainMenu,
		)
	}
	// –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.
	return false, nil
}

func (m *Model) ProcessSearch(ctx context.Context, msg Message) error {
	rawCard, err := m.storage.FindCard(ctx, m.search.GetCriterions()[0], msg.Text)
	if err != nil {
		return err
	}

	card := person.MarkupCard(&rawCard)

	return m.tgClient.SendMessage(
		card,
		msg.ChatID,
	)
}

func (m *Model) HandleButton(msg Message) error {
	button := msg.CallbackQuery.Data
	searchScreen := m.search.GetSearchScreen()
	firstName := msg.CallbackQuery.From.FirstName
	previousMarkup := msg.CallbackQuery.Message.ReplyMarkup

	switch button {
	case btnBack:
		m.search.Disable()
		ResetCriteriaButtons()
		return m.tgClient.EditTextAndMarkup(
			msg,
			fmt.Sprintf(txtMainMenu, firstName),
			&markupMainMenu,
		)
	case btnSearchPerson:
		m.search.SetSearchScreen("person")
		return m.tgClient.EditTextAndMarkup(
			msg,
			txtCriterionChoose,
			&markupSearchPersonMenu,
		)
	case btnSearchOrganization:
		m.search.SetSearchScreen("organization")
		return m.tgClient.EditTextAndMarkup(
			msg,
			txtCriterionChoose,
			&markupSearchOrganizationMenu,
		)
	case btnApply:
		m.search.Enable()
		lenCriterions := len(m.search.GetCriterions())
		if lenCriterions == 0 {
			return m.tgClient.EditTextAndMarkup(
				msg,
				txtNoCriteria,
				previousMarkup,
			)
			// TEST
		} else if lenCriterions == 1 {
			markup := markupCancelMenu
			return m.tgClient.EditTextAndMarkup(
				msg,
				fmt.Sprintf(txtCriteriaInput, m.search.GetCriterions()[0]),
				&markup,
			)
		}
	case btnCancelSearch:
		m.search.Disable()
		m.search.ResetSearchCriterions()
		ResetCriteriaButtons()
		return m.tgClient.SendMessageWithMarkup(
			fmt.Sprintf(txtMainMenu, firstName),
			msg.ChatID,
			&markupMainMenu,
		)
	case HandleCriterionButton(button, m.search):
		markup := CreateSearchMenuMarkup(searchScreen)
		return m.tgClient.EditMarkup(
			msg,
			&markup,
		)
	}

	return nil
}
