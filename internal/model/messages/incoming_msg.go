package messages

import (
	"context"
	"fmt"
	types "telegram-bot/internal/model/bottypes"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/opentracing/opentracing-go"
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –Ω–∞—á–∞–ª–æ.

const (
	txtStart           = "–ü—Ä–∏–≤–µ—Ç, %v.\n–Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ <b>–õ–∏–≥–∞ –¶–∏—Ñ—Ä—ã</b>."
	txtUnknownCommand  = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ\n/start"
	txtReportError     = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
	txtReportWait      = "–ò—â—É üîé\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	txtCriterionChoose = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ , –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ <b>–ü—Ä–∏–º–µ–Ω–∏—Ç—å</b>."
	txtCatEmpty        = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π."
)

// –ö–Ω–æ–ø–∫–∏.
var (
	searchButtons = map[string][]string{
		"user": {
			"–§–ò–û",
			"–ì–æ—Ä–æ–¥",
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–î–æ–ª–∂–Ω–æ—Å—Ç—å",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
		},
		"university": {
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
			"–ì–æ—Ä–æ–¥",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
			"¬´–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç-2030¬ª",
			"–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å–æ—Ä—Ü–∏—É–º–µ",
			"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–û",
			"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ù–û–¶",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
		},
	}
	searchPersonButton         = "üîç –ò–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
	searchOrganizationButton   = "üîç –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"
	backButton                 = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	menuButton                 = "‚Ü©Ô∏è –ú–µ–Ω—é"
	cancelSearchButton         = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
	applyButton                = "üÜó –ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	searchButton               = "üîç –ò—Å–∫–∞—Ç—å"
	printFirstPersonalCard     = "‚ö†Ô∏è–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞‚ö†Ô∏è"
	printAllPersonalCards      = "‚ö†Ô∏è–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏‚ö†Ô∏è"
	printFirstOrganizationCard = "‚ö†Ô∏è–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏‚ö†Ô∏è"
	loadMoreButton             = "‚è¨ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ 5"

	toggleButtonPrefix = "‚úÖ "
)

// –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.
var btnSearch = []types.TgRowButtons{
	{
		types.TgInlineButton{
			DisplayName: searchPersonButton,
		},
	},
	{
		types.TgInlineButton{
			DisplayName: searchOrganizationButton,
		},
	},
}

var btnSearchPerson = []types.TgRowButtons{
	{
		types.TgInlineButton{
			DisplayName: "–§–ò–û",
		},
		types.TgInlineButton{
			DisplayName: "–ì–æ—Ä–æ–¥",
		},
		types.TgInlineButton{
			DisplayName: "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: "–î–æ–ª–∂–Ω–æ—Å—Ç—å",
		},
		types.TgInlineButton{
			DisplayName: "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: backButton,
		},
		types.TgInlineButton{
			DisplayName: applyButton,
		},
	},
}

var btnSearchOrganization = []types.TgRowButtons{
	{
		types.TgInlineButton{
			DisplayName: "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
		},
		types.TgInlineButton{
			DisplayName: "¬´–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç-2030¬ª",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: "–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å–æ—Ä—Ü–∏—É–º–µ",
		},
		types.TgInlineButton{
			DisplayName: "–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ù–û–¶",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–û",
		},
	},
	{
		types.TgInlineButton{
			DisplayName: backButton,
		},
		types.TgInlineButton{
			DisplayName: applyButton,
		},
	},
}

var (
	mainMenuMarkup               = getMainMenuMarkup()
	searchPersonMenuMarkup       = getSearchPersonCardMenu()
	searchOrganizationMenuMarkup = getSearchOrganizationCardMenu()
)

func createNumericKeyboard(buttons []types.TgRowButtons) tgbotapi.InlineKeyboardMarkup {
	keyboard := make([][]tgbotapi.InlineKeyboardButton, len(buttons))
	for i := 0; i < len(buttons); i++ {
		tgRowButtons := buttons[i]
		keyboard[i] = make([]tgbotapi.InlineKeyboardButton, len(tgRowButtons))
		for j := 0; j < len(tgRowButtons); j++ {
			tgInlineButton := tgRowButtons[j]
			keyboard[i][j] = tgbotapi.NewInlineKeyboardButtonData(
				tgInlineButton.DisplayName,
				tgInlineButton.DisplayName,
			)
		}
	}
	return tgbotapi.NewInlineKeyboardMarkup(keyboard...)
}

func getMainMenuMarkup() tgbotapi.InlineKeyboardMarkup {
	return createNumericKeyboard(btnSearch)
}

func getSearchPersonCardMenu() tgbotapi.InlineKeyboardMarkup {
	return createNumericKeyboard(btnSearchPerson)
}

func getSearchOrganizationCardMenu() tgbotapi.InlineKeyboardMarkup {
	return createNumericKeyboard(btnSearchOrganization)
}

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –∫–æ–Ω–µ—Ü.

// –û–±–ª–∞—Å—Ç—å "–í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": –Ω–∞—á–∞–ª–æ.

// MessageSender –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
type MessageSender interface {
	SendMessage(text string, userID int64) error
	ShowInlineButtons(text string, markup tgbotapi.InlineKeyboardMarkup, userID int64) error
}

// UserDataStorage –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö.
type UserDataStorage interface {
	JoinGroup(ctx context.Context, u *tgbotapi.User) error
	LeaveGroup(ctx context.Context, u *tgbotapi.User) error
	CheckIfUserExist(ctx context.Context, userID int64) (bool, error)
	ShowAllPersonalCards(ctx context.Context) (pc []PersonalCard, err error)
}

// SearchEngine –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫.
type SearchEngine interface {
	RemoveCriterion(criteria string)
	AddCriterion(criteria string)
	ToggleCriterion(button types.TgInlineButton)
	ResetCriteriaButtons()
}

type PersonalCard struct {
	ID                   string
	Fio                  string
	City                 string
	Organization         string
	Job_title            string
	Expert_competencies  string
	Possible_cooperation string
	Contacts             string
}

// Model –ú–æ–¥–µ–ª—å –±–æ—Ç–∞ (–∫–ª–∏–µ–Ω—Ç, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
type Model struct {
	ctx      context.Context
	tgClient MessageSender   // –ö–ª–∏–µ–Ω—Ç.
	storage  UserDataStorage // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
	// search          SearchEngine     // –ü–æ–∏—Å–∫.
}

// New –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¢–ì –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.
func New(
	ctx context.Context,
	tgClient MessageSender,
	storage UserDataStorage,
	// search SearchEngine,
) *Model {
	return &Model{
		ctx:      ctx,
		tgClient: tgClient,
		storage:  storage,
		// search:          search,
	}
}

// Message –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
type Message struct {
	Text            string
	ChatID          int64
	UserID          int64
	FirstName       string
	NewChatMembers  []tgbotapi.User
	LeftChatMembers *tgbotapi.User
	CallbackQuery   *tgbotapi.CallbackQuery
	IsCallback      bool
	CallbackMsgID   string
}

func (m *Model) GetCtx() context.Context {
	return m.ctx
}

func (m *Model) SetCtx(ctx context.Context) {
	m.ctx = ctx
}

// IncomingMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (m *Model) IncomingMessage(msg Message) error {
	span, ctx := opentracing.StartSpanFromContext(m.ctx, "IncomingMessage")
	m.ctx = ctx
	defer span.Finish()

	// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
	if isNeedReturn, err := checkBotCommands(m, msg); err != nil || isNeedReturn {
		return err
	}

	// –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≥—Ä—É–ø–ø—ã
	if len(msg.NewChatMembers) != 0 {
		return m.storage.JoinGroup(ctx, &msg.NewChatMembers[0])
	}

	// –£—á–∞—Å—Ç–Ω–∏–∫ –≤—ã—à–µ–ª –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω
	if msg.LeftChatMembers != nil {
		return m.storage.LeaveGroup(ctx, msg.LeftChatMembers)
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
	return m.tgClient.SendMessage(txtUnknownCommand, msg.ChatID)
}

// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
func checkBotCommands(m *Model, msg Message) (bool, error) {
	span, ctx := opentracing.StartSpanFromContext(m.ctx, "checkBotCommands")
	m.ctx = ctx
	defer span.Finish()

	switch msg.Text {
	case "/start":
		displayName := msg.FirstName
		if len(displayName) == 0 {
			displayName = msg.FirstName
		}
		// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
		return true, m.tgClient.ShowInlineButtons(
			fmt.Sprintf(txtStart, displayName),
			mainMenuMarkup,
			msg.UserID,
		)
	}
	// –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.
	return false, nil
}

func (m *Model) HandleButton(msg Message) error {
	span, ctx := opentracing.StartSpanFromContext(m.ctx, "HandleButton")
	m.ctx = ctx
	defer span.Finish()

	button := msg.CallbackQuery.Data

	switch button {
	case backButton:
		displayName := msg.CallbackQuery.From.FirstName
		return m.tgClient.ShowInlineButtons(
			fmt.Sprintf(txtStart, displayName),
			mainMenuMarkup,
			msg.CallbackQuery.Message.Chat.ID,
		)
	case searchPersonButton:
		return m.tgClient.ShowInlineButtons(
			txtCriterionChoose,
			searchPersonMenuMarkup,
			msg.CallbackQuery.Message.Chat.ID,
		)
	case searchOrganizationButton:
		return m.tgClient.ShowInlineButtons(
			txtCriterionChoose,
			searchOrganizationMenuMarkup,
			msg.CallbackQuery.Message.Chat.ID,
		)
	}

	return nil
}
