package messages

import (
	"context"
	"fmt"
	types "telegram-bot/internal/model/bottypes"

	"github.com/opentracing/opentracing-go"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –Ω–∞—á–∞–ª–æ.

const (
	txtStart           = "–ü—Ä–∏–≤–µ—Ç, *%v*. –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.\b –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
	txtUnknownCommand  = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start"
	txtReportError     = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ."
	txtReportWait      = "–ò—â—É üîé\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
	txtCriterionChoose = "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ , –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **–ü—Ä–∏–º–µ–Ω–∏—Ç—å**."
	txtCatEmpty        = "–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è-–±—ã –æ–¥–∏–Ω –∫—Ä–∏—Ç–µ—Ä–∏–π."
	txtHelp            = "–Ø - –±–æ—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ **–õ–∏–≥–∞ –¶–∏—Ñ—Ä—ã**. –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start"
)

// –ö–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
var btnStart = []types.TgRowButtons{
	{
		types.TgInlineButton{
			DisplayName: "üîç –ò–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏",
			Value:       "/search_personal_card",
		},
		types.TgInlineButton{
			DisplayName: "üîç –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π",
			Value:       "/search_organization_card",
		},
		types.TgInlineButton{
			DisplayName: "‚ö†Ô∏è–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏‚ö†Ô∏è",
			Value:       "/all_personal_cards",
		},
	},
}

// –û–±–ª–∞—Å—Ç—å "–ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ": –∫–æ–Ω–µ—Ü.

// –û–±–ª–∞—Å—Ç—å "–í–Ω–µ—à–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å": –Ω–∞—á–∞–ª–æ.

// MessageSender –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
type MessageSender interface {
	SendMessage(text string, userID int64) error
	ShowInlineButtons(text string, buttons []types.TgRowButtons, userID int64) error
}

// UserDataStorage –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∞–Ω–Ω—ã—Ö.
type UserDataStorage interface {
	JoinGroup(
		ctx context.Context,
		id int64,
		userName string,
		firstName string,
		lastName string,
		isBot bool,
	) error
	LeaveGroup(ctx context.Context, u *tgbotapi.User) error
	CheckIfUserExist(ctx context.Context, userID int64) (bool, error)
	ShowAllPersonalCards(
		ctx context.Context,
	) (pc []PersonalCard, err error)
}

// SearchEngine –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫.
type SearchEngine interface {
	RemoveCriterion(criteria string)
	AddCriterion(criteria string)
	ToggleCriterion(button types.TgInlineButton)
	ResetCriteriaButtons()
}

type PersonalCard struct {
	ID                   string
	Fio                  string
	City                 string
	Organization         string
	Job_title            string
	Expert_competencies  string
	Possible_cooperation string
	Contacts             string
}

// Model –ú–æ–¥–µ–ª—å –±–æ—Ç–∞ (–∫–ª–∏–µ–Ω—Ç, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
type Model struct {
	ctx      context.Context
	tgClient MessageSender   // –ö–ª–∏–µ–Ω—Ç.
	storage  UserDataStorage // –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
	// search          SearchEngine     // –ü–æ–∏—Å–∫.
	lastUserCommand map[int64]string // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–∞–Ω–¥–∞.
}

// New –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¢–ì –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.
func New(
	ctx context.Context,
	tgClient MessageSender,
	storage UserDataStorage,
	// search SearchEngine,
) *Model {
	return &Model{
		ctx:      ctx,
		tgClient: tgClient,
		storage:  storage,
		// search:          search,
		lastUserCommand: map[int64]string{},
	}
}

// Message –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
type Message struct {
	Text            string
	UserID          int64
	UserName        string
	UserLastName    string
	UserFirtsName   string
	UserDisplayName string
	IsBot           bool
	IsCallback      bool
	CallbackMsgID   string
}

func (s *Model) GetCtx() context.Context {
	return s.ctx
}

func (s *Model) SetCtx(ctx context.Context) {
	s.ctx = ctx
}

// IncomingMessage –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (s *Model) IncomingMessage(msg Message) error {
	span, ctx := opentracing.StartSpanFromContext(s.ctx, "IncomingMessage")
	s.ctx = ctx
	defer span.Finish()

	// lastUserCommand := s.lastUserCommand[msg.UserID]

	// –û–±–Ω—É–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.
	s.lastUserCommand[msg.UserID] = ""

	// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
	if isNeedReturn, err := checkBotCommands(s, msg); err != nil || isNeedReturn {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
	return s.tgClient.SendMessage(txtUnknownCommand, msg.UserID)
}

// –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
func checkBotCommands(s *Model, msg Message) (bool, error) {
	span, ctx := opentracing.StartSpanFromContext(s.ctx, "checkBotCommands")
	s.ctx = ctx
	defer span.Finish()

	switch msg.Text {
	case "/start":
		displayName := msg.UserDisplayName
		if len(displayName) == 0 {
			displayName = msg.UserName
		}
		// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
		return true, s.tgClient.ShowInlineButtons(
			fmt.Sprintf(txtStart, displayName),
			btnStart,
			msg.UserID,
		)
	case "/help":
		return true, s.tgClient.SendMessage(txtHelp, msg.UserID)
	case "/search_personal_card":
		s.lastUserCommand[msg.UserID] = "/search_personal_card"
		return true, s.tgClient.SendMessage(
			txtCriterionChoose,
			msg.UserID,
		)
	case "/all_personal_cards":
		cards, _ := s.storage.ShowAllPersonalCards(ctx)
		return true, s.tgClient.SendMessage(fmt.Sprintf("%v", cards), msg.UserID)
	}
	// –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.
	return false, nil
}
