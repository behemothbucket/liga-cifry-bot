package main

import (
	"fmt"
	"strings"
)

var (
	searchButtons = map[string][]string{
		"user": {
			"–§–ò–û",
			"–ì–æ—Ä–æ–¥",
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–î–æ–ª–∂–Ω–æ—Å—Ç—å",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
		},
		"university": {
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
			"–ì–æ—Ä–æ–¥",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
			"¬´–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç-2030¬ª",
			"–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å–æ—Ä—Ü–∏—É–º–µ",
			"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–û",
			"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ù–û–¶",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
		},
	}

	searchUserButton           = "üîç –ò–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
	searchUniversityButton     = "üîç –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"
	backButton                 = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	menuButton                 = "‚Ü©Ô∏è –ú–µ–Ω—é"
	cancelSearchButton         = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
	applyButton                = "üÜó –ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	searchButton               = "üîç –ò—Å–∫–∞—Ç—å"
	printFirstPersonalCard     = "‚ö†Ô∏è–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞‚ö†Ô∏è"
	printAllPersonalCards      = "‚ö†Ô∏è–í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏‚ö†Ô∏è"
	printFirstOrganizationCard = "‚ö†Ô∏è–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏‚ö†Ô∏è"
	loadMoreButton             = "‚è¨ –ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ 5"
	// addCard                    = ""

	toggleButtonPrefix = "‚úÖ "
)

func hasPrefix(button string, prefix string) bool {
	return strings.Contains(button, prefix)
}

func (b *Bot) removeSearchCriterion(criteria string) {
	if b.currentSearchScreen == "user" {
		delete(b.userSearchCriteria, criteria)
	} else {
		delete(b.universitySearchCriteria, criteria)
	}
}

func (b *Bot) addSearchCriterion(criteria string) {
	if b.currentSearchScreen == "user" {
		b.userSearchCriteria[criteria] = criteria
	} else {
		b.universitySearchCriteria[criteria] = criteria
	}
}

func findButtonIndex(buttons []string, targetButton string) int {
	for i, button := range buttons {
		if button == targetButton {
			return i
		}
	}
	return -1
}

func (b *Bot) toggleCriterionButton(button string) {
	index := findButtonIndex(searchButtons[b.currentSearchScreen], button)

	if hasPrefix(searchButtons[b.currentSearchScreen][index], toggleButtonPrefix) {
		uncheckedButton := strings.TrimPrefix(
			searchButtons[b.currentSearchScreen][index],
			toggleButtonPrefix,
		)
		searchButtons[b.currentSearchScreen][index] = uncheckedButton
		b.removeSearchCriterion(uncheckedButton)
	} else {
		searchButtons[b.currentSearchScreen][index] = toggleButtonPrefix + button
		b.addSearchCriterion(button)
	}
}

func (b *Bot) resetCriteriaButtons() {
	for _, searchScreen := range searchButtons {
		for i, button := range searchScreen {
			if hasPrefix(button, toggleButtonPrefix) {
				searchScreen[i] = strings.TrimPrefix(button, toggleButtonPrefix)
				b.removeSearchCriterion(button)
			}
		}
	}
	for k := range b.userSearchCriteria {
		delete(b.userSearchCriteria, k)
	}
	for k := range b.universitySearchCriteria {
		delete(b.universitySearchCriteria, k)
	}
}

func (b *Bot) criterionButtonIsClicked(button string) string {
	for _, v := range searchButtons[b.currentSearchScreen] {
		if button == v {
			return button
		}
	}

	return ""
}

func (b *Bot) getCriterion() string {
	var criterion string
	var criteria map[string]string

	if b.currentSearchScreen == "user" {
		criteria = b.userSearchCriteria
	} else {
		criteria = b.universitySearchCriteria
	}

	for _, v := range criteria {
		criterion = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ <b>%s</b>", v)
		// currentCriterion = v
	}
	return criterion
}
