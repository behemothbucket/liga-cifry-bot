package main

import (
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strings"
)

var (
	searchButtons = map[string][]string{
		"user": {
			"–§–ò–û",
			"–ì–æ—Ä–æ–¥",
			"–í–£–ó",
			"–î–æ–ª–∂–Ω–æ—Å—Ç—å",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–º–æ—â—å/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
			"–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
		},
		"university": {
			"–í–£–ó",
			"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2030",
			"–ö–∞–º–ø—É—Å –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
			"–ù–∞–ª–∏—á–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫...",
			"–ù–∞–ª–∏—á–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫...",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–º–æ—â—å/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
			"–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
		},
	}

	searchUserButton       = "–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	searchUniversityButton = "–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
	backButton             = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	cancelButton           = "‚ùå –û—Ç–º–µ–Ω–∞"
	applyButton            = "üìù –ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	searchButton           = "üîç –ò—Å–∫–∞—Ç—å"
	miroButton             = "Miro"
)

func handleButton(query *tgbotapi.CallbackQuery) {
	var text string

	markup := getMainMenuMarkup()
	message := query.Message

	if query.Data == searchUserButton {
		text = searchMenuDescription
		markup = getUserSearchMenuMarkup()
		currentSearchScreen = "user"

	} else if query.Data == searchUniversityButton {
		text = searchMenuDescription
		markup = getUniversitySearchMenuMarkup()
		currentSearchScreen = "university"
	} else if query.Data == backButton {
		text = mainMenuDescription
		markup = getMainMenuMarkup()
		for k := range searchCriterias {
			delete(searchCriterias, k)
		}
	} else if query.Data == applyButton {
		text = getCriteria()
		markup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(tgbotapi.NewInlineKeyboardButtonData(cancelButton, cancelButton)),
		)
		searchMode = true
	} else if query.Data == cancelButton {
		SendMenu(message.Chat.ID)
		for k := range searchCriterias {
			delete(searchCriterias, k)
		}
		searchMode = false
		callbackCfg := tgbotapi.NewCallback(query.ID, "")
		bot.Send(callbackCfg)
		return
	} else if criteriaButtonIsClicked(query.Data) {
		toggleButtonCheck(query.Data)
		text = searchMenuDescription
		if currentSearchScreen == "user" {
			markup = getUserSearchMenuMarkup()
		} else {
			markup = getUniversitySearchMenuMarkup()
		}
	}

	callbackCfg := tgbotapi.NewCallback(query.ID, "")
	bot.Send(callbackCfg)

	msg := tgbotapi.NewEditMessageTextAndMarkup(message.Chat.ID, message.MessageID, text, markup)
	msg.ParseMode = tgbotapi.ModeHTML
	bot.Send(msg)
}

func hasPrefix(button string, prefix string) bool {
	return strings.Contains(button, prefix)
}

func removeKey(criteria string) {
	delete(searchCriterias, criteria)
}

func findButtonIndex(buttons []string, targetButton string) int {
	for i, button := range buttons {
		if button == targetButton {
			return i
		}
	}
	return -1
}

func toggleButtonCheck(button string) {
	prefix := "‚úÖ "

	index := findButtonIndex(searchButtons[currentSearchScreen], button)

	if hasPrefix(searchButtons[currentSearchScreen][index], prefix) {
		key := strings.TrimPrefix(searchButtons[currentSearchScreen][index], prefix)
		searchButtons[currentSearchScreen][index] = key
		removeKey(key)
	} else {
		searchButtons[currentSearchScreen][index] = prefix + button
		searchCriterias[button] = button
	}
}

func criteriaButtonIsClicked(button string) bool {
	flag := false

	for _, v := range searchButtons[currentSearchScreen] {
		if button == v {
			flag = true
			break
		}
	}

	return flag
}

func getCriteria() string {
	val := ""
	for _, v := range searchCriterias {
		val = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ <b>%s</b>", v)
		currentCriteria = v
	}
	return val
}
