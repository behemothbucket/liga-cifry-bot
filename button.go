package main

import (
	"fmt"
	"strings"
)

var (
	searchButtons = map[string][]string{
		"user": {
			"–§–ò–û",
			"–ì–æ—Ä–æ–¥",
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–î–æ–ª–∂–Ω–æ—Å—Ç—å",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
		},
		"university": {
			"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è",
			"–°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ",
			"–ì–æ—Ä–æ–¥",
			"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞",
			"¬´–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç-2030¬ª",
			"–ß–ª–µ–Ω—Å—Ç–≤–æ –≤ –∫–æ–Ω—Å–æ—Ä—Ü–∏—É–º–µ",
			"–†–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ü–û",
			"–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏ –∏ –ù–û–¶",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
		},
	}

	searchUserButton       = "üîç –ò–Ω–¥–∏–≤–∏–¥—É–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏"
	searchUniversityButton = "üîç –ö–∞—Ä—Ç–æ—á–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"
	backButton             = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	menuButton             = "üìã –ú–µ–Ω—é"
	cancelSearchButton     = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
	applyButton            = "üÜó –ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	searchButton           = "üîç –ò—Å–∫–∞—Ç—å"
	addCard                = ""

	toggleButtonPrefix = "‚úÖ "
)

func hasPrefix(button string, prefix string) bool {
	return strings.Contains(button, prefix)
}

func removeSearchCriterion(criteria string) {
	if currentSearchScreen == "user" {
		delete(userSearchCriteria, criteria)
	} else {
		delete(universitySearchCriteria, criteria)
	}
}

func addSearchCriterion(criteria string) {
	if currentSearchScreen == "user" {
		userSearchCriteria[criteria] = criteria
	} else {
		universitySearchCriteria[criteria] = criteria
	}
}

func findButtonIndex(buttons []string, targetButton string) int {
	for i, button := range buttons {
		if button == targetButton {
			return i
		}
	}
	return -1
}

func toggleCriterionButton(button string) {
	index := findButtonIndex(searchButtons[currentSearchScreen], button)

	if hasPrefix(searchButtons[currentSearchScreen][index], toggleButtonPrefix) {
		uncheckedButton := strings.TrimPrefix(searchButtons[currentSearchScreen][index], toggleButtonPrefix)
		searchButtons[currentSearchScreen][index] = uncheckedButton
		removeSearchCriterion(uncheckedButton)
	} else {
		searchButtons[currentSearchScreen][index] = toggleButtonPrefix + button
		addSearchCriterion(button)
	}
}

func resetCriteriaButtons() {
	for _, searchScreen := range searchButtons {
		for i, button := range searchScreen {
			if hasPrefix(button, toggleButtonPrefix) {
				searchScreen[i] = strings.TrimPrefix(button, toggleButtonPrefix)
				removeSearchCriterion(button)
			}
		}
	}
	for k := range userSearchCriteria {
		delete(userSearchCriteria, k)
	}
	for k := range universitySearchCriteria {
		delete(universitySearchCriteria, k)
	}
}

func criterionButtonIsClicked(button string) string {
	for _, v := range searchButtons[currentSearchScreen] {
		if button == v {
			return button
		}
	}
	return ""
}

func getCriterion() string {
	var criterion string
	var criteria map[string]string

	if currentSearchScreen == "user" {
		criteria = userSearchCriteria
	} else {
		criteria = universitySearchCriteria
	}

	for _, v := range criteria {
		criterion = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ <b>%s</b>", v)
		currentCriterion = v
	}
	return criterion
}
