package main

import (
	"fmt"
	"strings"
)

var (
	searchButtons = map[string][]string{
		"user": {
			"–§–ò–û",
			"–ì–æ—Ä–æ–¥",
			"–í–£–ó",
			"–î–æ–ª–∂–Ω–æ—Å—Ç—å",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–º–æ—â—å/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
			"–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
		},
		"university": {
			"–í–£–ó",
			"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2030",
			"–ö–∞–º–ø—É—Å –º–∏—Ä–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è",
			"–ù–∞–ª–∏—á–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–æ–∫...",
			"–ù–∞–ª–∏—á–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫...",
			"–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏",
			"–ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–º–æ—â—å/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
			"–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
		},
	}

	searchUserButton       = "üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	searchUniversityButton = "üîç –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
	searchAllButton        = "üîç –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∫–∞—Ä—Ç–æ—á–∫–∞–º"
	backButton             = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
	cancelButton           = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
	applyButton            = "üìù –ü—Ä–∏–º–µ–Ω–∏—Ç—å"
	searchButton           = "üîç –ò—Å–∫–∞—Ç—å"
	miroButton             = "Miro"

	toggleButtonPrefix = "‚úÖ "
)

func hasPrefix(button string, prefix string) bool {
	return strings.Contains(button, prefix)
}

func removeSearchCriteria(criteria string) {
	delete(searchCriterias, criteria)
}

func addSearchCriteria(criteria string) {
	searchCriterias[criteria] = criteria
}

func removeAllSearchCriterias() {
	for k := range searchCriterias {
		delete(searchCriterias, k)
	}
}

func removeCriteriaByPrefix(screen []string, prefix string) {
	for i, _ := range screen {
		if hasPrefix(screen[i], prefix) {
			key := strings.TrimPrefix(screen[i], prefix)
			screen[i] = key
			removeSearchCriteria(key)
		}
	}
}

func findButtonIndex(buttons []string, targetButton string) int {
	for i, button := range buttons {
		if button == targetButton {
			return i
		}
	}
	return -1
}

func toggleCriteriaButton(button string) {
	index := findButtonIndex(searchButtons[currentSearchScreen], button)

	if hasPrefix(searchButtons[currentSearchScreen][index], toggleButtonPrefix) {
		removedPrefix := strings.TrimPrefix(searchButtons[currentSearchScreen][index], toggleButtonPrefix)
		searchButtons[currentSearchScreen][index] = removedPrefix
		removeSearchCriteria(removedPrefix)
	} else {
		searchButtons[currentSearchScreen][index] = toggleButtonPrefix + button
		addSearchCriteria(button)
	}
}

func resetCriteriaButtons() {
	removeCriteriaByPrefix(searchButtons[currentSearchScreen], toggleButtonPrefix)
}

func criteriaButtonIsClicked(button string) bool {
	flag := false

	for _, v := range searchButtons[currentSearchScreen] {
		if button == v {
			flag = true
			break
		}
	}

	return flag
}

func getCriteria() string {
	val := ""
	for _, v := range searchCriterias {
		val = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞ <b>%s</b>", v)
		currentCriteria = v
	}
	return val
}
